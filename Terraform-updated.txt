1.how does Terrform it differs  from cloudformation ,pulomi,cross plane ?
a)Terrform using API as code concept approch,Terraform interact with cloud providers ,

Terrofrom is open source tool where we can create resources in multiple could paltform like AWS,GCP,Azure etc where as With Couldformation we can only create resources
in AWS. 
Crossplane is designed natively for Kubernetes while Terraform can be used independently or with its Kubernetes provider

In Terrform state file is managed by user and in Pulomi state file managed by pulomi.


2.what is the terraform resource and how you it define in configuration file ?

Resource in terraform creates or manages the resources in the cloud (example if you want to create EC2 instance in AWS cloud , you will drecribe the resource and 
required congiruration in reource block)

EX : resource "resource_type" "resource_name" {
  # Configuration parameters for the resource
  parameter1 = value1
  parameter2 = value2
  # ...
}

resource "aws_instance" "Instance1"{
}

resource "aws_instance" "Instance2"{
}
resource "aws_instance" "Instance3"{
}


terrform destroy -traget "aws_instance.Instance3"



3.when ever we have access keys ,passwords how to manage them in Terraform ?


Vaults or Secret Management Systems:
  Retrieve sensitive values dynamically during the Terraform run.


4.have you ever use data sources to retrive the sentive infromation  from any external system?


Data sources in Terraform are used to fetch information from external systems and use that information within your Terraform configurations.

data "vault_generic_secret" "my_secret" {
  path = "secret/data/my_app"(path of the vault , where you have your secrect key)
}


5.in Terraform ,what is statefile & how to use it ?
statefile keeps track of the current state of your infrastructure.
The state file helps Terraform understand the dependencies between resources, allowing it to create, modify, or delete resources in the correct order.

6.how to  you manger different environment (dev,staging,prod) in Terraform?
a) using workspace or usable modules 

7.how terraform handling the depencies between resources ?
By using "depends_on"
In Terraform, the depends_on meta-argument is used to explicitly specify the order of resource creation or update. When you declare a dependency using depends_on, Terraform ensures that the specified resources are created or updated before the resource containing the dependency.

8.what is state file,where it is stored  & when is it created in terraform?
a) state file is a file used by terrform to record information about the resources that are created or deployed . it is in json format 

statefile keeps track of the current state of your infrastructure.
statefile is created when you run 'terrform apply'. stored in terrform.ftstate file.

9.taint  command function  in terraform ?
The terraform taint command in Terraform is used to mark a specific resource instance as "tainted" or "invalidated." Tainting a resource signals Terraform that it should consider the resource as potentially needing replacement during the next terraform apply. Tainting a resource does not automatically delete it; instead, Terraform will plan to recreate the resource during the next apply.


10.what is null resource in terraform?

11.what is module in Terraform?
a) Terraform module is a collection of standard configuration files in a dedicated directory path.it is the way to package & reuse resource configurations .

Different components in Terraform are 1.root module :having .tf files in main working directory 
2.child module : A module that has been called by another module is often referred to as a child module.
3.published module :  for sharing modules to public 

Terraform modules using GitHUB , S3 buckets

eg : module "s3_module"{ source = "s3::https://s3.amazonaws.com/dgruploads-kube-kops/s3_module_example.zip" }


12.what is data source , how we can use data source ?

13.what type of resource we have created in terraform for AWS devops?

14.do you know what is dynamic block & why is  to use it ?

15.what is vnet integration  in Azure devops?
16.what is the version of Terraform ?
5.32.0
17.what is use of  Template file in datasource ?
You can use a template file to dynamically generate the script with variables.
18.we have to pin 10 linux vm using terraform ,we have to install default appliction in all 10 vm using terraform template file ?

19.when does statefile created in terraform ?Terraform plan ?


20 what happen when Terraform apply ?
a) terraform will create the resources and  create a file with the name terraform.tfstate . a state file is record of information about the resources that are created.

21.what are the components used in Terraform?
a) resource group,
22.how to do changes  in the configuration of already created resource in terraform ?
a) using terraform import command 

23) what do you do with stateful file & where its stored in Terrform 
a) Terraform maintain the stateful file that maps current status of your  infrastructure with configuration  file  & it is stored in local machine , S3 bucket in AWS & link it .

24) how to reslove the issue when you lost the statefile ?
Backups , 
recreate statefile with import
25)what are major features in Terraform ?

26)can to explain terraform validate command with example ?
check the syntax ..

27)explain life cycle in  Terraform ?
a) life cycle is nested block ///
Lifecycle: allow modification of the resource lifecycle
create-before-destroy: New replacement object is created first and the prior object is destroyed after the replacement is created.
prevent-destroy: Terraform to reject, with an error any plan that could destroy 
ignore-changes: Ignore certain changes to the live resource that does not match the configuration
replace-triggred-by: Replace the resource when any of the referenced item change

28)we have 20 resources running in AWS , we can want to destory one resource is it possbile ?
a) terraform destory -target resource type resource name command 

29)how you store the key in terraform?
a) 

30)what are different kinds of modules in terraform?
modules are a way to organize and reuse code, allowing you to encapsulate and share infrastructure components
Child Modules:Child modules are modules that are called by other modules
Root Modules: The root module is the top-level module in a Terraform configuration
Composite Modules:Composite modules are modules that encapsulate multiple child modules to represent a higher-level component or subsystem
Provider Modules: encapsulate configuration related to a specific cloud or infrastructure provider
Data Modules:modules are used to fetch and provide data from external sources,

31)what is  remote backend in terraform ?
a remote backend refers to a storage location for the Terraform state file that is not local to the machine where Terraform commands are executed

32)how to provide varible value at run time in terraform?

a)using terraform apply -var ="variable_name=value".

33)how to manage terraform code in multiple environments ?
a)using terraform workspace or usable modules 

34)why do we call terraform as a instructure code ?
a)manage IT infra structire using configuration files ,

35)can you explain drawbacks of terraform ?
Terraform has its own domain-specific language (DSL) called HashiCorp Configuration Language (HCL)
Terraform relies on a state file to keep track of the current infrastructure state. Managing and versioning this state file, especially in a team or collaborative environment, can be challenging
Error handling in Terraform is somewhat limited. When an error occurs during execution, Terraform may not provide detailed information about the cause, making troubleshooting more challenging.


36) what is taint command used for in terraform ?
The terraform taint command in Terraform is used to mark a resource as "tainted." Tainting a resource means flagging it as needing replacement during the next terraform apply operation. This can be useful when you want to force the recreation of a particular resource, 



42) what is terraform state file  lock ?
State Locking:
When multiple users or processes are working with the same Terraform configuration and state file, there is a risk of conflicts if two or more attempts to modify the infrastructure occur simultaneously. Terraform addresses this issue by implementing a locking mechanism.


43) how to defined depencies in terraform?how many types depencies ?
a)By default, Terraform automatically identifies and manages dependencies based on the relationships between resources in the configuration. For example:
resource "aws_instance" "web" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
}

resource "aws_security_group" "web_sg" {
  // This security group is implicitly dependent on the "aws_instance" resource above.
  vpc_id = aws_instance.web.vpc_security_group_ids[0]
}

Explicit Dependencies:
In some cases, you may want to explicitly define dependencies between resources using the depends_on argument. This is useful when Terraform's automatic dependency detection might not be sufficient or when you want to enforce a specific order of resource creation:
resource "aws_instance" "web" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
}

resource "aws_security_group" "web_sg" {
  // Explicit dependency on the "aws_instance" resource
  depends_on = [aws_instance.web]
  
  vpc_id = aws_instance.web.vpc_security_group_ids[0]
}



44) what is external Data block in terraform ?
a)it enables terraform to communicate with external systems, execute commands and use the output as input for your infrastructure definitions.

45)why do we required terraform import command ?
to import existing infrastructure into your Terraform state



46)

37) what is null resource used ?
a) null _resource can be used to implement the resources standard life cycle , it will not create any resources on the cloud platform.it used to run commands ,scripts with local provisioner  in resources block. uses cases: data source block,output block 
38)what is service endpoint & private end pointin terraform ? 
a)private end point in terraform refers to an endpoint with in virtual network that allows you to connect supported services privately  ,there are in clous platform AWS,Azure
39)what is difference between anisible & terraform ?
a) there are five major difference BT anisble & Terraform
1.Terraform is a provisioning tool               1.ansible is configuration management tool
2.Terraform follows declarative                  2.ansible follows both declarative and procedural approach 
3.does not support bare metal provisioning       3.anisble supports the provisionong of bare metal servers
4.does not support in terms of packaging ,        4.anisble support in terms of packaging , templating 
templating 



40 ) what is workspaces in terraform?
a)work space is a way to maintain multiple copies of deployments that can be created and destroyed , workspaces isolate independent deployments of the same terraform config while using same state file.

 resource are known to be created in default workspace.
commands:1. terraform workspace list  2.terraform workspace new  3.terraform workspace select 4.terraform workspace delete 5.terraform workspace show 




41) state file :state file is a file used by terrform to record information about the resources that are created or deployed . it is in json format.
  By default state files are stored in local directory where terraform is run.
state file management :
we can store the statefiles remotely ,the location of remote statefile can be referenced using backend block in the terraform block which is usually in the main.tf file or you can defined in the backend.tf file,such as S3 bucket, azure blob storage , or DB like postgre SQL.

a) Dynamo DB table can be used to lock multiple remote state files.
b) enable bucket versioning on S3 bucket .

eg: terraform {
backend "s3"{
bucket ="S3 bucket name"
key =" /terraform.tfstate"
region ="us-east-1"
dynamodb_table ="terraform_state_lock"
}
}

c) terraform state pull -->to down load statefile from remote 

46.assume that i didnt use terraform for dev environment , suddenly client ask to manage all the environments in terraform.how you will manage the Dev ?
ans)by using import commant , we get statefile,by statefile we need wirte confuguration files
47.we need change the configuration in EC2 like increase cpu, memory .how you will do that in terraform and but you dont have the terraform code with you ?
aws ec2 modify-instance-attribute --instance-id i-1234567890abcdef0 --instance-type t2.micro
48.How to create different resources in different regions
Ans (example ec2 in us-east-1 and s3 bucket in ap-sout-1)

provider "aws"{
     region = 'us-east-1"
}

provider "aws"{
 alias ="mumbai"
 region = "ap-south-1"
}

resource "aws_instance" "instance1"{
ami =''''
instance_type = '''
}
resource "s3_bucket" "bucket1"{
name = "mybucket112339789"
provider = "aws.mumbai"(provider name . alias name)
}

49) Resources in different accounts?
Once you configure aws on your CLI. you will get folder called .aws --- >>credentials file --->
[default]
aws_access_key = xxxxxxx
aws_secret_key = yyyyyyy

Now you need to add new account detail in this file

[accountnew]
aws_access_key = xxxxxxx
aws_secret_key = yyyyyyy

save the file.


in main.tf file in terraform 

provider "aws"{
     region = 'us-east-1"
}

provider "aws"{
 alias ="newaccount" ---- name for terraform
 profile = "accountnew" -----------name fron aws credential file
 region = "ap-south-1"
}

resource "aws_instance" "instance1"{
ami =''''
instance_type = '''
}
resource "s3_bucket" "bucket1"{
name = "mybucket112339789"
provider = "aws.newaccount"(provider name . alias name)
}

49) If somebody delect RDS Resource block in configuration file. what will happen ?

it will destroy the resource , we need to check plan every time. 

50)few resources are created in cloudformation and you missed few resources to import , what will happen to those resources?
We can not manage those resources from terraform.

 








Terraform providers:Terraform relies on plugins called "providers" to interact with cloud providers.

Terraform  resources:Each resource block describes one or more infrastructure objects such as VPC, EC2 or high level components such as the DNS records

eg : resource "aws-instance" ''example"{
       ami ="ami-example"
       instance_type ="t2.micro"
  }

Terraform Registry :Terraform registry is to provide plugins to manage any infrastructure API,pre-made modules to quickly configure common infra components, secuirty rules (polices ) for use with Terraform.


Terraform authentication to AWS provider in following orders.
1.Parameters in the provider(not preferable for production) configuration 2. environment variables 3.shared credential files 4 .shared configuration files 5.container credentials 6.instance profile credentials and region (IAM).

shared configuration & credentails files are located at " $HOME/.aws/config "


Terraform Basic syntax:

Arguments: an arguments assigns a value to a particular name 
blocks :a block is a container for other content.

eg : block type -->resource "aws_instance" "example_instance"{
       instance_type ="t2.micro"
       ami   ="ami-773"
}


 Terraform life cycle or work flow: It consists of stages init,validate,plan,apply,show and destory

terraform init:    it initalizes a working directory containing terraform configuration files.
terraform validate: it validate  the configuration files in a directory     
terraform plan:  its preview of  actions terraform will take when you  apply your configurations 
terraform apply: it create or update the infrastructure 
terraform show: it shows which resources are created .
terraform destroy: it destory the resources managed by terraform

terraform taint : manually mark a resource for recreation 

Terraform force -unlock command : go to dynamio DB & copy the id then run below command

 terraform force -unlock "id"

terraform refresh : update the local state file against real resources 


Terraform import : we can import the existing infrastructure resources which is not created by terraform , by using terraform import command we can mange the existing infrastructure and store the information in state file.

note : it cannot simultaneously import an entire collection of resources like an AWS VPC.

eg: terraform import aws_instance.example id 

terraform tainting:using this command it informs terraform that a particular object has become degraded or damaged 
 terraform apply -replace ="resourcename"
eg : terraform taint aws_instance 


Terraform variables:it is used for paramise to pass values, you can set their values using CLI options and environment variables.

input variables :input variables are like function arugments 
output variables: output variables are like function returns (it allow to expose values from your module it can be used by other parts of terraform setup)
local variable :like functions of temprory values


assigning values to variables:

1.in a terraform cloud workspace   2.environment variables  3. (.tfvars files) 4. -var command line option

below is the order terrform looks for the variables values

1.environment  variables 2. terraform.tfvars files  3.terraform.tfvars.json 4. *.auto.tfvars or *.auto.tfvars.json  5 . any -var and -var-file options 


a. environment variables: Terraform process for environment variables named TF_VAR_name odf declared variable 
a.Variables passing values using -var : 
eg:terraform plan -var="image_id=ami-2345"

b. variable definitions (.tfvars) files : terraform plan -var-file="variables.tfvars"




eg: variable "instance_type_name" {
  type = string 
default ="t2.micro"
description ="specific name"
 }

resource "aws_instance" "example_instance"{
instance_type =var.instance_type_name
ami   =var.image_id
}


Terraform outputs: it will display information like instance IP or instance ID on command line .the outputs values are a way to expose some of that information to the user of your module.


eg: output "instance_private_ip"{
 value = aws_instance.ip
}



Terraform locals: Terraform locals are named values which can be assigned and used with in modules instead of repeating expression.

eg : provider "aws"{
region ="us-east-1"
}
locals{
common_tags={
name =local.name
Project =local.project
owner =local.Owner
}
}
resource "aws_instance" "locals_example"{
instance_type ="t2.micro"
ami ="jdidi"
tags =local.common_tags
}



How breaking the configuration files in terraform:we have to maintain individual files for each block like provide0r.tf , resource.tf, variables.tf,terraform.tfvars,outputs.tf


Terraform data source : It is used to fetch the certain existing information  about resoucres that already created like VPC ID or Subnet to creat new resources or it will fetch data from APIs or other terraform state backends.

eg1: data "aws_vpc" "existing_vpc"{

filter {
 name ="tag:Name"
values =["default"]
}

Terraform provisioner : Terraform provisioner are used for excuting scripts or shell commands on local or remote machine as part of resource creation or destory .

provisioners can be used to bootstrap a resource, cleanup before destory ,run configuration management, etc.


there are types of provisioners 
a)file provisioner :  copies files or directories from local machine to a remote machine.
b)local -exec: to run scripts locally machine where terraform is executed 
c)remote -exec : to run the scripts on a remote machine over ssh


eg : provisioner "local-exec "{
 command ="echo The server's IP address ${self.private_ip} >> private_ips.txt"
}

provisioner "file"{
source ="script.sh"
desination ="/home/file/script.sh"
connection {
type ="ssh"
user ="ec2-user"
password="
host ="${aws_instance.public_ip}"
port=22
}
}


eg: remote provisioner 

 provisioner "remote-exec"{
inline=[
 "chmod +x /home/file/script.sh",
"home/file/script.sh"
]
}
}


Terraform meta-arguments :using terraform meta arguments we can customize the behavior of modules and resources in terraform configuration code.
 below are the meta arguments

depends_on :to handle hidden resources or module dependencies 
count: to create or manage several similar objects
for _each:to create or manage several different objects
provider:to override terraforms default provider configuration
lifecycle:it defines the lifecycle for the resource


Depends _on argument example:
 resource "aws_instance""depends_on_example"{
ami=varimage_id
instance_type=var.instance_type
depends_on=[aws_iam_role_policy.depends_on_example]
}







